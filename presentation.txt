.. title: Things to make writing tests easier

:data-transition-duration: 150
:css: presentation.css

-------------

:id: title
:class: slide

Things to make writing tests easier
===================================

Chris Withers

----

:class: slide

Something to test
=================

.. class:: block-quote sp100

  "Here's some data in a CSV..."

.. table::
    :class: my-table-class

    +------------+------------+
    | Name       | Money Owed |
    +============+============+
    | Adam Alpha | 100        |
    +------------+------------+
    | Brian Beta | 300        | 
    +------------+------------+
    | CÃ©dric Cee | 200        |
    +------------+------------+

.. class:: block-quote right

  "...parse it and tell me who owes the most money!"

--------

:class: pop
:id: sample1

.. include:: code/sample1.py
  :code: python

.. note:: here's the spec for the function

-----------

:class: pop
:id: test1
:data-x: r0
:data-y: r0
:data-transition-duration: 0

.. include:: code/tests/test_sample1.py
  :code: python
  :start-line: 1

-----------

:class: pop
:id: test2
:data-x: r1600
:data-y: r0
:data-transition-duration: 0

.. include:: code/tests/test_sample2.py
  :code: python
  :start-line: 1

--------

:class: pop
:id: sample2
:data-x: r0
:data-y: r0

.. include:: code/sample2.py
  :code: python

.. note:: 

  obvious problem!
  ...so lets round outwith some more tests

--------

:class: pop
:data-x: r1600
:data-y: r0

.. include:: code/tests/test_sample3.py
  :code: python
  :start-line: 16
  :end-line: 25

--------

:class: pop
:data-x: r0
:data-y: r300

.. include:: code/tests/test_sample3.py
  :code: python
  :start-line: 26
  :end-line: 35

--------

:class: pop
:data-x: r0
:data-y: r300

.. include:: code/tests/test_sample3.py
  :code: python
  :start-line: 35

.. note:: 

  test round one, we DON'T use csv writer:

  - too symetrical
  - doesn't let us test malformed csv
  - what about line endings? bytes vs strings?

  Test doesn't work on Windows (re-open tempfile!)

  what if we had to process a dir of files to get the answer?

-----------

:id: sample3
:data-x: r450
:data-y: r-300
:data-z: 800

.. include:: code/sample3.py
  :code: python

.. note::

   here's the code

   - what if we one saw zeros or negative numbers
   - what about whitespace in headers?
   - line coverage is only a start!

--------

:class: pop
:data-x: r2000
:data-y: r-150
:data-z: 0

.. include:: code/tests/test_sample4.py
  :code: python
  :start-line: 16
  :end-line: 25

--------

:data-x: r1600
:data-y: r0
:data-z: r0

.. include:: code/sample3.py
  :code: python

.. note::

   here's the code

   still bugs:

   - what if we one saw zeros or negative numbers
   - what about whitespace in headers?
   - line coverage is only a start!

--------

Have we tested the logging?

What do the exceptions look like?

----------------------

  copy and paste -> abstract -> tools

  ...but then need to test those

------------------

Enter the tools:

- testfixtures

- mock

- manuel

----------------

Here's how we can use them to make our tests simpler:

- tempdir
- logcapture
- replacer
- time

----------------
 
compare
========

- prefix to compare!
- put expected first: looks weird but makes sense    
- sets
- dicts
- lists and tuples
- generators (generator helper)
- long strings
- string comparison objects
- registering your own
- comparison objects


contrast with python std lib versions

.. container:: box w600
 
  If you're using a version of Python where the ``with`` keyword is
  available, a TempDirectory can be used as a
  context manager:

.. code :: python

  >>> from testfixtures import TempDirectory
  >>> with TempDirectory() as d:
  ...   d.write('test.txt', b'some foo thing')
  ...   foo2bar(d.path, 'test.txt')
  ...   d.read('test.txt')
  '...'
  b'some bar thing'

---------------------

output capture
==============

-------------------

testing exceptions
==================

- ShouldRaise
- any exception
- type of exception
- specific exception (best!)
- think about testing str(ex) to make sure it makes sense
- what's in stdlib now?

with self.assertRaises(SomeException) as cm:
    do_something()

the_exception = cm.exception
self.assertEqual(the_exception.error_code, 3)

-----------------------

files and directories
=====================

- computing paths
- writing files (encoding)
- reading files (encoding)
- listing directories

----------------------

logging
========

seperates log entry generation from log entry recording
- inspecting for tracebacks (diff between error, exception and exc_info=true_
- filtering by level
- filtering by logger
- checking handler configuration

--------------------

mocking
=======

- replacers
- replace where used, contrast with Mock (ie: same)
- things that may not be there
- dict keys
- elements in lists
- removing things (dict values (eg: env), attributes)

contrast with mock.patch

---------------------

dates and times
===============

- mocks
- non - monotonic
- set values / add values
- set delta / delta type
- now / utcnow

----------------------

the call pattern mock
=====================

- mock out a set of methods
- check they're called in order with expected params
- side effects
- changes is API

- at end give smart-arse test of file:// url
- however, can't simulate 401, etc
- work example, change from path to url

-------------------

pitfalls
========

symetric testings (proves nothing)
over mocking (misses interface)

-----------------

manuel
======

- different parsers
- testfixtures plugin
- testing documentation

-----------------

modes of operation 
==================

(TempDirectory, Replacers, LogCapture)

- decorator
- context manager
- manual
 
----------------

:data-x: r1600
:data-y: r0
:class: slide
:id: questions

Questions
=========

?

----------

:id: links
:class: slide

Links
=======

testfixtures
------------

* https://pypi.python.org/pypi/testfixtures
* search for "testfixtures python"

mock
----

* http://docs.python.org/dev/library/unittest.mock
* search for "python mock"

Chris Withers
-------------

* chris@withers.org
* @chriswithers13

.. note:: 

   testfixtures and mock are available separately, py25 - py33
   newer unittest features only really fully there in py33
   unittest2 may bring a lot of it?

---------

:id: test-highlight
:class: highlight


